#ifndef _ALTERA_HPS_DEF_H_
#define _ALTERA_HPS_DEF_H_

/*
 * This file was automatically generated by the swinfo2header utility.
 * 
 * Created from SOPC Builder system 'soc_system' in
 * file 'soc_system.swinfo'.
 */

/*
 * This file contains macros for module 'hps_0' and devices
 * connected to the following masters:
 *   h2f_axi_master
 *   h2f_lw_axi_master
 * 
 * Do not include this header file and another header file created for a
 * different module or master group at the same time.
 * Doing so may result in duplicate macro names.
 * Instead, use the system header file which has macros with unique names.
 */

/*
 * Macros for device 'onchip_RAM', class 'altera_avalon_onchip_memory2'
 * The macros are prefixed with 'ONCHIP_RAM_'.
 * The prefix is the slave descriptor.
 */
#define ONCHIP_RAM_COMPONENT_TYPE altera_avalon_onchip_memory2
#define ONCHIP_RAM_COMPONENT_NAME onchip_RAM
#define ONCHIP_RAM_BASE 0x0
#define ONCHIP_RAM_SPAN 65536
#define ONCHIP_RAM_END 0xffff
#define ONCHIP_RAM_ALLOW_IN_SYSTEM_MEMORY_CONTENT_EDITOR 0
#define ONCHIP_RAM_ALLOW_MRAM_SIM_CONTENTS_ONLY_FILE 0
#define ONCHIP_RAM_CONTENTS_INFO ""
#define ONCHIP_RAM_DUAL_PORT 0
#define ONCHIP_RAM_GUI_RAM_BLOCK_TYPE AUTO
#define ONCHIP_RAM_INIT_CONTENTS_FILE soc_system_onchip_RAM
#define ONCHIP_RAM_INIT_MEM_CONTENT 1
#define ONCHIP_RAM_INSTANCE_ID NONE
#define ONCHIP_RAM_NON_DEFAULT_INIT_FILE_ENABLED 0
#define ONCHIP_RAM_RAM_BLOCK_TYPE AUTO
#define ONCHIP_RAM_READ_DURING_WRITE_MODE DONT_CARE
#define ONCHIP_RAM_SINGLE_CLOCK_OP 0
#define ONCHIP_RAM_SIZE_MULTIPLE 1
#define ONCHIP_RAM_SIZE_VALUE 65536
#define ONCHIP_RAM_WRITABLE 1
#define ONCHIP_RAM_MEMORY_INFO_DAT_SYM_INSTALL_DIR SIM_DIR
#define ONCHIP_RAM_MEMORY_INFO_GENERATE_DAT_SYM 1
#define ONCHIP_RAM_MEMORY_INFO_GENERATE_HEX 1
#define ONCHIP_RAM_MEMORY_INFO_HAS_BYTE_LANE 0
#define ONCHIP_RAM_MEMORY_INFO_HEX_INSTALL_DIR QPF_DIR
#define ONCHIP_RAM_MEMORY_INFO_MEM_INIT_DATA_WIDTH 32
#define ONCHIP_RAM_MEMORY_INFO_MEM_INIT_FILENAME soc_system_onchip_RAM

/*
 * Macros for device 'sysid_qsys', class 'altera_avalon_sysid_qsys'
 * The macros are prefixed with 'SYSID_QSYS_'.
 * The prefix is the slave descriptor.
 */
#define SYSID_QSYS_COMPONENT_TYPE altera_avalon_sysid_qsys
#define SYSID_QSYS_COMPONENT_NAME sysid_qsys
#define SYSID_QSYS_BASE 0x10000
#define SYSID_QSYS_SPAN 8
#define SYSID_QSYS_END 0x10007
#define SYSID_QSYS_ID 2899645186
#define SYSID_QSYS_TIMESTAMP 1505256393

/*
 * Macros for device 'led_pio', class 'altera_avalon_pio'
 * The macros are prefixed with 'LED_PIO_'.
 * The prefix is the slave descriptor.
 */
#define LED_PIO_COMPONENT_TYPE altera_avalon_pio
#define LED_PIO_COMPONENT_NAME led_pio
#define LED_PIO_BASE 0x10040
#define LED_PIO_SPAN 16
#define LED_PIO_END 0x1004f
#define LED_PIO_BIT_CLEARING_EDGE_REGISTER 0
#define LED_PIO_BIT_MODIFYING_OUTPUT_REGISTER 0
#define LED_PIO_CAPTURE 0
#define LED_PIO_DATA_WIDTH 10
#define LED_PIO_DO_TEST_BENCH_WIRING 0
#define LED_PIO_DRIVEN_SIM_VALUE 0
#define LED_PIO_EDGE_TYPE NONE
#define LED_PIO_FREQ 100000000
#define LED_PIO_HAS_IN 0
#define LED_PIO_HAS_OUT 1
#define LED_PIO_HAS_TRI 0
#define LED_PIO_IRQ_TYPE NONE
#define LED_PIO_RESET_VALUE 0

/*
 * Macros for device 'dipsw_pio', class 'altera_avalon_pio'
 * The macros are prefixed with 'DIPSW_PIO_'.
 * The prefix is the slave descriptor.
 */
#define DIPSW_PIO_COMPONENT_TYPE altera_avalon_pio
#define DIPSW_PIO_COMPONENT_NAME dipsw_pio
#define DIPSW_PIO_BASE 0x10080
#define DIPSW_PIO_SPAN 16
#define DIPSW_PIO_END 0x1008f
#define DIPSW_PIO_BIT_CLEARING_EDGE_REGISTER 0
#define DIPSW_PIO_BIT_MODIFYING_OUTPUT_REGISTER 0
#define DIPSW_PIO_CAPTURE 0
#define DIPSW_PIO_DATA_WIDTH 10
#define DIPSW_PIO_DO_TEST_BENCH_WIRING 1
#define DIPSW_PIO_DRIVEN_SIM_VALUE 0
#define DIPSW_PIO_EDGE_TYPE NONE
#define DIPSW_PIO_FREQ 100000000
#define DIPSW_PIO_HAS_IN 1
#define DIPSW_PIO_HAS_OUT 0
#define DIPSW_PIO_HAS_TRI 0
#define DIPSW_PIO_IRQ_TYPE NONE
#define DIPSW_PIO_RESET_VALUE 0

/*
 * Macros for device 'button_pio', class 'altera_avalon_pio'
 * The macros are prefixed with 'BUTTON_PIO_'.
 * The prefix is the slave descriptor.
 */
#define BUTTON_PIO_COMPONENT_TYPE altera_avalon_pio
#define BUTTON_PIO_COMPONENT_NAME button_pio
#define BUTTON_PIO_BASE 0x100c0
#define BUTTON_PIO_SPAN 16
#define BUTTON_PIO_END 0x100cf
#define BUTTON_PIO_BIT_CLEARING_EDGE_REGISTER 0
#define BUTTON_PIO_BIT_MODIFYING_OUTPUT_REGISTER 0
#define BUTTON_PIO_CAPTURE 0
#define BUTTON_PIO_DATA_WIDTH 4
#define BUTTON_PIO_DO_TEST_BENCH_WIRING 1
#define BUTTON_PIO_DRIVEN_SIM_VALUE 0
#define BUTTON_PIO_EDGE_TYPE NONE
#define BUTTON_PIO_FREQ 100000000
#define BUTTON_PIO_HAS_IN 1
#define BUTTON_PIO_HAS_OUT 0
#define BUTTON_PIO_HAS_TRI 0
#define BUTTON_PIO_IRQ_TYPE NONE
#define BUTTON_PIO_RESET_VALUE 0

/*
 * Macros for device 'sgdma_mm2st', class 'altera_avalon_sgdma'
 * The macros are prefixed with 'SGDMA_MM2ST_'.
 * The prefix is the slave descriptor.
 */
#define SGDMA_MM2ST_COMPONENT_TYPE altera_avalon_sgdma
#define SGDMA_MM2ST_COMPONENT_NAME sgdma_mm2st
#define SGDMA_MM2ST_BASE 0x20000
#define SGDMA_MM2ST_SPAN 64
#define SGDMA_MM2ST_END 0x2003f
#define SGDMA_MM2ST_ADDRESS_WIDTH 32
#define SGDMA_MM2ST_ALWAYS_DO_MAX_BURST 1
#define SGDMA_MM2ST_ATLANTIC_CHANNEL_DATA_WIDTH 4
#define SGDMA_MM2ST_AVALON_MM_BYTE_REORDER_MODE 0
#define SGDMA_MM2ST_BURST_DATA_WIDTH 8
#define SGDMA_MM2ST_BURST_TRANSFER 0
#define SGDMA_MM2ST_BYTES_TO_TRANSFER_DATA_WIDTH 16
#define SGDMA_MM2ST_CHAIN_WRITEBACK_DATA_WIDTH 32
#define SGDMA_MM2ST_COMMAND_FIFO_DATA_WIDTH 104
#define SGDMA_MM2ST_CONTROL_DATA_WIDTH 8
#define SGDMA_MM2ST_CONTROL_SLAVE_ADDRESS_WIDTH 4
#define SGDMA_MM2ST_CONTROL_SLAVE_DATA_WIDTH 32
#define SGDMA_MM2ST_DESCRIPTOR_READ_BURST 0
#define SGDMA_MM2ST_DESC_DATA_WIDTH 32
#define SGDMA_MM2ST_HAS_READ_BLOCK 1
#define SGDMA_MM2ST_HAS_WRITE_BLOCK 0
#define SGDMA_MM2ST_IN_ERROR_WIDTH 0
#define SGDMA_MM2ST_OUT_ERROR_WIDTH 0
#define SGDMA_MM2ST_READ_BLOCK_DATA_WIDTH 8
#define SGDMA_MM2ST_READ_BURSTCOUNT_WIDTH 4
#define SGDMA_MM2ST_STATUS_TOKEN_DATA_WIDTH 24
#define SGDMA_MM2ST_STREAM_DATA_WIDTH 8
#define SGDMA_MM2ST_SYMBOLS_PER_BEAT 1
#define SGDMA_MM2ST_UNALIGNED_TRANSFER 0
#define SGDMA_MM2ST_WRITE_BLOCK_DATA_WIDTH 8
#define SGDMA_MM2ST_WRITE_BURSTCOUNT_WIDTH 4

/*
 * Macros for device 'hps_0_bridges', class 'hps_bridge_avalon'
 * Path to the device is from the master group 'sgdma_mm2st_m_read'.
 * The macros are prefixed with 'SGDMA_MM2ST_M_READ_HPS_0_BRIDGES_'.
 * The prefix is the master group descriptor and the slave descriptor.
 */
#define SGDMA_MM2ST_M_READ_HPS_0_BRIDGES_COMPONENT_TYPE hps_bridge_avalon
#define SGDMA_MM2ST_M_READ_HPS_0_BRIDGES_COMPONENT_NAME hps_0_bridges
#define SGDMA_MM2ST_M_READ_HPS_0_BRIDGES_BASE 0x0
#define SGDMA_MM2ST_M_READ_HPS_0_BRIDGES_SPAN 0xffffffff
#define SGDMA_MM2ST_M_READ_HPS_0_BRIDGES_END 0xfffffffe

/*
 * Macros for device 'sgdma_st2mm', class 'altera_avalon_sgdma'
 * The macros are prefixed with 'SGDMA_ST2MM_'.
 * The prefix is the slave descriptor.
 */
#define SGDMA_ST2MM_COMPONENT_TYPE altera_avalon_sgdma
#define SGDMA_ST2MM_COMPONENT_NAME sgdma_st2mm
#define SGDMA_ST2MM_BASE 0x20040
#define SGDMA_ST2MM_SPAN 64
#define SGDMA_ST2MM_END 0x2007f
#define SGDMA_ST2MM_ADDRESS_WIDTH 32
#define SGDMA_ST2MM_ALWAYS_DO_MAX_BURST 1
#define SGDMA_ST2MM_ATLANTIC_CHANNEL_DATA_WIDTH 4
#define SGDMA_ST2MM_AVALON_MM_BYTE_REORDER_MODE 0
#define SGDMA_ST2MM_BURST_DATA_WIDTH 8
#define SGDMA_ST2MM_BURST_TRANSFER 0
#define SGDMA_ST2MM_BYTES_TO_TRANSFER_DATA_WIDTH 16
#define SGDMA_ST2MM_CHAIN_WRITEBACK_DATA_WIDTH 32
#define SGDMA_ST2MM_COMMAND_FIFO_DATA_WIDTH 104
#define SGDMA_ST2MM_CONTROL_DATA_WIDTH 8
#define SGDMA_ST2MM_CONTROL_SLAVE_ADDRESS_WIDTH 4
#define SGDMA_ST2MM_CONTROL_SLAVE_DATA_WIDTH 32
#define SGDMA_ST2MM_DESCRIPTOR_READ_BURST 0
#define SGDMA_ST2MM_DESC_DATA_WIDTH 32
#define SGDMA_ST2MM_HAS_READ_BLOCK 0
#define SGDMA_ST2MM_HAS_WRITE_BLOCK 1
#define SGDMA_ST2MM_IN_ERROR_WIDTH 0
#define SGDMA_ST2MM_OUT_ERROR_WIDTH 0
#define SGDMA_ST2MM_READ_BLOCK_DATA_WIDTH 8
#define SGDMA_ST2MM_READ_BURSTCOUNT_WIDTH 4
#define SGDMA_ST2MM_STATUS_TOKEN_DATA_WIDTH 24
#define SGDMA_ST2MM_STREAM_DATA_WIDTH 8
#define SGDMA_ST2MM_SYMBOLS_PER_BEAT 1
#define SGDMA_ST2MM_UNALIGNED_TRANSFER 0
#define SGDMA_ST2MM_WRITE_BLOCK_DATA_WIDTH 8
#define SGDMA_ST2MM_WRITE_BURSTCOUNT_WIDTH 4

/*
 * Macros for device 'hps_0_bridges', class 'hps_bridge_avalon'
 * Path to the device is from the master group 'sgdma_st2mm_m_write'.
 * The macros are prefixed with 'SGDMA_ST2MM_M_WRITE_HPS_0_BRIDGES_'.
 * The prefix is the master group descriptor and the slave descriptor.
 */
#define SGDMA_ST2MM_M_WRITE_HPS_0_BRIDGES_COMPONENT_TYPE hps_bridge_avalon
#define SGDMA_ST2MM_M_WRITE_HPS_0_BRIDGES_COMPONENT_NAME hps_0_bridges
#define SGDMA_ST2MM_M_WRITE_HPS_0_BRIDGES_BASE 0x0
#define SGDMA_ST2MM_M_WRITE_HPS_0_BRIDGES_SPAN 0xffffffff
#define SGDMA_ST2MM_M_WRITE_HPS_0_BRIDGES_END 0xfffffffe

/*
 * Macros for device 'fifo_in', class 'altera_avalon_sc_fifo'
 * The macros are prefixed with 'FIFO_IN_'.
 * The prefix is the slave descriptor.
 */
#define FIFO_IN_COMPONENT_TYPE altera_avalon_sc_fifo
#define FIFO_IN_COMPONENT_NAME fifo_in
#define FIFO_IN_BASE 0x20080
#define FIFO_IN_SPAN 16
#define FIFO_IN_END 0x2008f

/*
 * Macros for device 'fifo_out', class 'altera_avalon_sc_fifo'
 * The macros are prefixed with 'FIFO_OUT_'.
 * The prefix is the slave descriptor.
 */
#define FIFO_OUT_COMPONENT_TYPE altera_avalon_sc_fifo
#define FIFO_OUT_COMPONENT_NAME fifo_out
#define FIFO_OUT_BASE 0x20090
#define FIFO_OUT_SPAN 16
#define FIFO_OUT_END 0x2009f


#endif /* _ALTERA_HPS_DEF_H_ */
